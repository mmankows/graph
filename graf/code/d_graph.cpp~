#include "../lib/d_graph.h"

#include <cctype>
#include <cstdio>

dGraph::~dGraph() { this->Graph::~Graph(); }

dGraph::dGraph(const char* file_name)
{
FILE *fptr;
fptr=fopen(file_name,"r");

int num,last=-1;


while(fscanf(fptr,"%d%*d",&num)==1)
{

if(last!=num) //gdy na liscie nowy wiercholek
{
last=num;
vnum++;

list<Vertex> t;
t.push_front(num); //zainicjuj liste krawedzi wiercholkiem
vList.push_back(t); //dorzuc do glownej listy wierzcholkow

}

} 
rewind(fptr); 


/////////////
//perser////

int x1,x2;
while(fscanf(fptr,"%d%d",&x1,&x2)==2) add_e(Vertex(x1),Vertex(x2));
//tworzy odpowiednie krawedzie do wierzcholkow

/////////////////
////////////////

fclose(fptr);
bIt=vList.begin();
sIt=bIt->begin();

}



bool dGraph::add_e(Vertex v1, Vertex v2, bool check)
{
if(check==true){
if(!has_vertex(v1) || !has_vertex(v2)) { 
std::cout<<"brak wierzcholka do krawedzi!\n";
return false; 
}}

int done=1;
for(bIt=vList.begin(); bIt != vList.end() && done!=0; bIt++) 
{    
sIt=bIt->begin();
if(*sIt == v1)
{
    bIt->push_back(v2);
    done--;
}

}

return true;
}
